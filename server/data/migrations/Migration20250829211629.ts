import { Migration } from '@mikro-orm/migrations'

export class Migration20250829211629 extends Migration {
    override async up(): Promise<void> {
        this.addSql(`create table "requirement" ("id" uuid not null, "created_by_id" varchar(766) not null, "creation_date" timestamptz not null, "req_type" text check ("req_type" in ('actor', 'assumption', 'behavior', 'component', 'constraint', 'context_and_objective', 'effect', 'environment', 'environment_component', 'epic', 'event', 'example', 'functional_behavior', 'functionality', 'glossary_term', 'goal', 'goals', 'hint', 'interaction_requirement', 'invariant', 'justification', 'limit', 'meta_requirement', 'noise', 'non_functional_behavior', 'obstacle', 'project', 'organization', 'outcome', 'parsed_requirements', 'person', 'product', 'requirement', 'responsibility', 'role', 'scenario', 'scenario_step', 'silence', 'solution', 'stakeholder', 'system', 'system_component', 'task', 'test_case', 'use_case', 'user_story')) not null, "parsed_requirements_id" uuid null, "scenario_step_id" uuid null, "parent_scenario_id" uuid null, "parent_step_id" uuid null, "use_case_id" uuid null, constraint "requirement_pkey" primary key ("id"));`)
        this.addSql(`create index "requirement_req_type_index" on "requirement" ("req_type");`)

        this.addSql(`create table "requirement_versions" ("effective_from" timestamptz not null, "requirement_id" uuid not null, "is_deleted" boolean not null, "modified_by_id" varchar(766) not null, "req_type" text check ("req_type" in ('actor', 'assumption', 'behavior', 'component', 'constraint', 'context_and_objective', 'effect', 'environment', 'environment_component', 'epic', 'event', 'example', 'functional_behavior', 'functionality', 'glossary_term', 'goal', 'goals', 'hint', 'interaction_requirement', 'invariant', 'justification', 'limit', 'meta_requirement', 'noise', 'non_functional_behavior', 'obstacle', 'project', 'organization', 'outcome', 'parsed_requirements', 'person', 'product', 'requirement', 'responsibility', 'role', 'scenario', 'scenario_step', 'silence', 'solution', 'stakeholder', 'system', 'system_component', 'task', 'test_case', 'use_case', 'user_story')) not null, "workflow_state" text check ("workflow_state" in ('Proposed', 'Rejected', 'Removed', 'Review', 'Active', 'Parsed')) not null default 'Proposed', "solution_id" uuid null, "name" varchar(100) not null, "description" varchar(1000) not null, "req_id" varchar(255) null, "parent_component_id" uuid null, "functionality_id" uuid null, "email" varchar(254) null, "order" int null, "step_type" text check ("step_type" in ('Action', 'Condition')) null, "priority" text check ("priority" in ('MUST', 'SHOULD', 'COULD', 'WONT')) null, "primary_actor_id" uuid null, "outcome_id" uuid null, "functional_behavior_id" uuid null, "slug" varchar(255) null, "organization_id" uuid null, "segmentation" text check ("segmentation" in ('Client', 'Vendor')) null, "category" text check ("category" in ('Business Rule', 'Physical Law', 'Engineering Decision', 'Key Stakeholder', 'Shadow Influencer', 'Fellow Traveler', 'Observer')) null, "interest" int null, "influence" int null, "scope_id" uuid null, "trigger_id" uuid null, constraint "requirement_versions_pkey" primary key ("effective_from", "requirement_id"));`)
        this.addSql(`create index "requirement_versions_req_type_index" on "requirement_versions" ("req_type");`)

        this.addSql(`create table "slack_channel_meta" ("channel_id" varchar(255) not null, "team_id" varchar(255) not null, "channel_name" varchar(255) not null, "team_name" varchar(255) not null, "solution_id" uuid not null, "created_by_id" varchar(766) not null, "creation_date" timestamptz not null, "last_name_refresh" timestamptz null, constraint "slack_channel_meta_pkey" primary key ("channel_id", "team_id"));`)

        this.addSql(`create table "slack_user_meta" ("slack_user_id" varchar(255) not null, "team_id" varchar(255) not null, "app_user_id" varchar(766) not null, "created_by_id" varchar(766) not null, "creation_date" timestamptz not null, constraint "slack_user_meta_pkey" primary key ("slack_user_id", "team_id"));`)

        this.addSql(`create table "slack_workspace_meta" ("team_id" varchar(255) not null, "team_name" varchar(255) not null, "organization_id" uuid not null, "access_token" text not null, "bot_user_id" varchar(255) not null, "scope" text not null, "app_id" varchar(255) not null, "installed_by_id" varchar(766) not null, "installation_date" timestamptz not null, "last_refresh_date" timestamptz null, constraint "slack_workspace_meta_pkey" primary key ("team_id"));`)

        this.addSql(`alter table "requirement" add constraint "requirement_parsed_requirements_id_foreign" foreign key ("parsed_requirements_id") references "requirement" ("id") on update cascade on delete set null;`)
        this.addSql(`alter table "requirement" add constraint "requirement_scenario_step_id_foreign" foreign key ("scenario_step_id") references "requirement" ("id") on update cascade on delete set null;`)
        this.addSql(`alter table "requirement" add constraint "requirement_parent_scenario_id_foreign" foreign key ("parent_scenario_id") references "requirement" ("id") on update cascade on delete set null;`)
        this.addSql(`alter table "requirement" add constraint "requirement_parent_step_id_foreign" foreign key ("parent_step_id") references "requirement" ("id") on update cascade on delete set null;`)
        this.addSql(`alter table "requirement" add constraint "requirement_use_case_id_foreign" foreign key ("use_case_id") references "requirement" ("id") on update cascade on delete set null;`)

        this.addSql(`alter table "requirement_versions" add constraint "requirement_versions_requirement_id_foreign" foreign key ("requirement_id") references "requirement" ("id") on update cascade;`)
        this.addSql(`alter table "requirement_versions" add constraint "requirement_versions_solution_id_foreign" foreign key ("solution_id") references "requirement" ("id") on update cascade on delete set null;`)
        this.addSql(`alter table "requirement_versions" add constraint "requirement_versions_parent_component_id_foreign" foreign key ("parent_component_id") references "requirement" ("id") on update cascade on delete set null;`)
        this.addSql(`alter table "requirement_versions" add constraint "requirement_versions_functionality_id_foreign" foreign key ("functionality_id") references "requirement" ("id") on update cascade on delete set null;`)
        this.addSql(`alter table "requirement_versions" add constraint "requirement_versions_primary_actor_id_foreign" foreign key ("primary_actor_id") references "requirement" ("id") on update cascade on delete set null;`)
        this.addSql(`alter table "requirement_versions" add constraint "requirement_versions_outcome_id_foreign" foreign key ("outcome_id") references "requirement" ("id") on update cascade on delete set null;`)
        this.addSql(`alter table "requirement_versions" add constraint "requirement_versions_functional_behavior_id_foreign" foreign key ("functional_behavior_id") references "requirement" ("id") on update cascade on delete set null;`)
        this.addSql(`alter table "requirement_versions" add constraint "requirement_versions_organization_id_foreign" foreign key ("organization_id") references "requirement" ("id") on update cascade on delete set null;`)
        this.addSql(`alter table "requirement_versions" add constraint "requirement_versions_scope_id_foreign" foreign key ("scope_id") references "requirement" ("id") on update cascade on delete set null;`)

        this.addSql(`alter table "slack_channel_meta" add constraint "slack_channel_meta_solution_id_foreign" foreign key ("solution_id") references "requirement" ("id") on update cascade;`)

        this.addSql(`alter table "slack_workspace_meta" add constraint "slack_workspace_meta_organization_id_foreign" foreign key ("organization_id") references "requirement" ("id") on update cascade;`)
    }
}
